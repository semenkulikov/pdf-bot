from aiogram import types, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loader import dp, app_logger
from database.query_orm import (
    get_all_pdf_countries,
    get_pdf_country_by_code,
    create_pdf_country,
    get_pdf_services_by_country_id,
    get_pdf_service_by_id,
    create_pdf_service
)
from database.engine import async_session
from states.states import AdminPanel
from keyboards.inline.admin_keyboards import (
    get_admin_pdf_menu_keyboard,
    get_pdf_countries_keyboard,
    get_country_edit_keyboard,
    get_pdf_services_keyboard,
    get_service_edit_keyboard
)


async def show_pdf_admin_menu(message: types.Message, state: FSMContext):
    app_logger.info("–ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ PDF.")
    keyboard = get_admin_pdf_menu_keyboard()
    await message.edit_text("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å PDF:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await state.set_state(AdminPanel.pdf_admin_menu)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∞–º–∏ (PDFCountry)
@dp.callback_query(StateFilter(AdminPanel.pdf_admin_menu), F.data == "admin:pdf:countries")
async def show_pdf_countries(call: types.CallbackQuery, state: FSMContext):
    app_logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ PDF —Å—Ç—Ä–∞–Ω.")
    countries = await get_all_pdf_countries()
    keyboard = get_pdf_countries_keyboard(countries)
    await call.message.edit_text("–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –¥–ª—è PDF:", reply_markup=keyboard)
    await state.update_data(current_menu="countries")
    await call.answer()

@dp.callback_query(StateFilter(AdminPanel.pdf_admin_menu), F.data == "admin:pdf:add_country")
async def admin_add_country_prompt(call: types.CallbackQuery, state: FSMContext):
    app_logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –≤—ã–±—Ä–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω—ã.")
    await call.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ;–∫–æ–¥\n–ü—Ä–∏–º–µ—Ä: üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è;france"
    )
    await state.set_state(AdminPanel.add_pdf_country)
    await call.answer()

@dp.message(StateFilter(AdminPanel.add_pdf_country))
async def admin_add_country_receive(message: types.Message, state: FSMContext):
    app_logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username} –≤–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω—ã.")
    try:
        name, code = map(str.strip, message.text.split(";"))
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ;–∫–æ–¥")
        app_logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã.")
        return
    country = await create_pdf_country(name=name, code=code)
    await message.answer(f"–°—Ç—Ä–∞–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {country.name} ({country.code})")
    app_logger.info(f"–°—Ç—Ä–∞–Ω–∞ {country.name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    await state.clear()
    await show_pdf_admin_menu(message, state)

@dp.callback_query(StateFilter(AdminPanel.pdf_admin_menu), F.data.startswith("admin:pdf:edit_country:"))
async def admin_edit_country_prompt(call: types.CallbackQuery, state: FSMContext):
    country_code = call.data.split(":")[-1]
    app_logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –≤—ã–±—Ä–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã {country_code}.")
    await state.update_data(edit_country_code=country_code)
    keyboard = get_country_edit_keyboard()
    await call.message.edit_text(f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–æ–π: {country_code}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await call.answer()

@dp.callback_query(StateFilter(AdminPanel.pdf_admin_menu), F.data == "admin:pdf:do_edit_country")
async def admin_do_edit_country(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    country_code = data.get("edit_country_code")
    if not country_code:
        await call.answer("–û—à–∏–±–∫–∞: —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.", show_alert=True)
        app_logger.error("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã: –Ω–µ –≤—ã–±—Ä–∞–Ω –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã.")
        return
    app_logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω—É {country_code}.")
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ;–∫–æ–¥")
    await state.set_state(AdminPanel.edit_pdf_country)
    await call.answer()

@dp.message(StateFilter(AdminPanel.edit_pdf_country))
async def admin_edit_country_receive(message: types.Message, state: FSMContext):
    app_logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username} –≤–≤–æ–¥–∏—Ç –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã.")
    try:
        new_name, new_code = map(str.strip, message.text.split(";"))
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ;–∫–æ–¥")
        app_logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω—ã.")
        return
    data = await state.get_data()
    old_code = data.get("edit_country_code")
    if not old_code:
        await message.answer("–û—à–∏–±–∫–∞: —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
        app_logger.error("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞.")
        return
    country = await get_pdf_country_by_code(old_code)
    if not country:
        await message.answer("–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        app_logger.error(f"–°—Ç—Ä–∞–Ω–∞ —Å –∫–æ–¥–æ–º {old_code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    country.name = new_name
    country.code = new_code
    async with async_session() as session:
        session.add(country)
        await session.commit()
    await message.answer(f"–°—Ç—Ä–∞–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_name} ({new_code})")
    app_logger.info(f"–°—Ç—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_name} ({new_code}).")
    await state.clear()
    await show_pdf_admin_menu(message, state)

@dp.callback_query(StateFilter(AdminPanel.pdf_admin_menu), F.data == "admin:pdf:delete_country")
async def admin_delete_country(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    country_code = data.get("edit_country_code")
    if not country_code:
        await call.answer("–û—à–∏–±–∫–∞: —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.", show_alert=True)
        app_logger.error("–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã: –Ω–µ –≤—ã–±—Ä–∞–Ω –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã.")
        return
    async with async_session() as session:
        await session.execute("DELETE FROM pdf_countries WHERE code = :code", {"code": country_code})
        await session.commit()
    await call.message.edit_text(f"–°—Ç—Ä–∞–Ω–∞ —Å –∫–æ–¥–æ–º {country_code} —É–¥–∞–ª–µ–Ω–∞.")
    app_logger.info(f"–°—Ç—Ä–∞–Ω–∞ —Å –∫–æ–¥–æ–º {country_code} —É–¥–∞–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    await state.clear()
    await show_pdf_admin_menu(call.message, state)
    await call.answer()


@dp.callback_query(StateFilter(AdminPanel.pdf_admin_menu), F.data == "admin:pdf:services")
async def show_country_for_services(call: types.CallbackQuery, state: FSMContext):
    app_logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –≤—ã–±—Ä–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏ PDF.")
    countries = await get_all_pdf_countries()
    keyboard = InlineKeyboardBuilder()
    for country in countries:
        keyboard.button(text=country.name, callback_data=f"admin:pdf:select_services:{country.code}")
    keyboard.button(text="–ù–∞–∑–∞–¥", callback_data="admin:pdf:back")
    keyboard.adjust(1)
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞–º–∏:", reply_markup=keyboard.as_markup())
    await state.update_data(current_menu="services")
    await call.answer()

@dp.callback_query(StateFilter(AdminPanel.pdf_admin_menu), F.data.startswith("admin:pdf:select_services:"))
async def admin_select_services(call: types.CallbackQuery, state: FSMContext):
    country_code = call.data.split(":")[-1]
    app_logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –≤—ã–±—Ä–∞–ª —Å—Ç—Ä–∞–Ω—É {country_code} –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞–º–∏.")
    await state.update_data(selected_country_for_services=country_code)
    from database.query_orm import get_pdf_country_by_code, get_pdf_services_by_country_id
    country = await get_pdf_country_by_code(country_code)
    if not country:
        await call.message.edit_text("–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        app_logger.error(f"–°—Ç—Ä–∞–Ω–∞ {country_code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ä–≤–∏—Å–æ–≤.")
        return
    services = await get_pdf_services_by_country_id(country.id)
    keyboard = get_pdf_services_keyboard(services, country.name)
    await call.message.edit_text(f"–°–µ—Ä–≤–∏—Å—ã –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country.name}:", reply_markup=keyboard)
    await call.answer()

@dp.callback_query(StateFilter(AdminPanel.pdf_admin_menu), F.data == "admin:pdf:add_service")
async def admin_add_service_prompt(call: types.CallbackQuery, state: FSMContext):
    app_logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –≤—ã–±—Ä–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.")
    data = await state.get_data()
    country_code = data.get("selected_country_for_services")
    if not country_code:
        await call.answer("–°—Ç—Ä–∞–Ω–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.", show_alert=True)
        app_logger.error("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞.")
        return
    await call.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ;JSON_–ø–æ–ª—è_—à–∞–±–ª–æ–Ω–∞\n–ü—Ä–∏–º–µ—Ä: Leboncoin;{\"field1\":\"–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—è 1\", \"field2\":\"–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—è 2\"}"
    )
    await state.set_state(AdminPanel.add_pdf_service)
    await call.answer()

@dp.message(StateFilter(AdminPanel.add_pdf_service))
async def admin_add_service_receive(message: types.Message, state: FSMContext):
    app_logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username} –≤–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.")
    try:
        service_name, template_fields = map(str.strip, message.text.split(";", 1))
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ;JSON_–ø–æ–ª—è_—à–∞–±–ª–æ–Ω–∞")
        app_logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞.")
        return
    data = await state.get_data()
    country_code = data.get("selected_country_for_services")
    if not country_code:
        await message.answer("–û—à–∏–±–∫–∞: —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
        app_logger.error("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞.")
        return
    country = await get_pdf_country_by_code(country_code)
    if not country:
        await message.answer("–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        app_logger.error(f"–°—Ç—Ä–∞–Ω–∞ {country_code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞.")
        return
    service = await create_pdf_service(name=service_name, country_id=country.id, template_fields=template_fields)
    await message.answer(f"–°–µ—Ä–≤–∏—Å –¥–æ–±–∞–≤–ª–µ–Ω: {service.name}")
    app_logger.info(f"–°–µ—Ä–≤–∏—Å {service.name} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country.name}.")
    await state.clear()
    await show_pdf_admin_menu(message, state)

@dp.callback_query(StateFilter(AdminPanel.pdf_admin_menu), F.data.startswith("admin:pdf:edit_service:"))
async def admin_edit_service_prompt(call: types.CallbackQuery, state: FSMContext):
    try:
        service_id = int(call.data.split(":")[-1])
    except ValueError:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Ä–≤–∏—Å–∞.", show_alert=True)
        app_logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.")
        return
    app_logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –≤—ã–±—Ä–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —Å ID {service_id}.")
    await state.update_data(edit_service_id=service_id)
    keyboard = get_service_edit_keyboard()
    await call.message.edit_text(f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º (ID: {service_id}). –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await call.answer()

@dp.callback_query(StateFilter(AdminPanel.pdf_admin_menu), F.data == "admin:pdf:do_edit_service")
async def admin_do_edit_service(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    service_id = data.get("edit_service_id")
    if not service_id:
        await call.answer("–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –Ω–µ –≤—ã–±—Ä–∞–Ω.", show_alert=True)
        app_logger.error("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞: ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    app_logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å —Å ID {service_id}.")
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ;JSON_–ø–æ–ª—è_—à–∞–±–ª–æ–Ω–∞")
    await state.set_state(AdminPanel.edit_pdf_service)
    await call.answer()

@dp.message(StateFilter(AdminPanel.edit_pdf_service))
async def admin_edit_service_receive(message: types.Message, state: FSMContext):
    app_logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username} –≤–≤–æ–¥–∏—Ç –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞.")
    try:
        new_name, new_template_fields = map(str.strip, message.text.split(";", 1))
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ;JSON_–ø–æ–ª—è_—à–∞–±–ª–æ–Ω–∞")
        app_logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞.")
        return
    data = await state.get_data()
    service_id = data.get("edit_service_id")
    if not service_id:
        await message.answer("–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        app_logger.error("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π ID.")
        return
    service = await get_pdf_service_by_id(service_id)
    if not service:
        await message.answer("–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        app_logger.error(f"–°–µ—Ä–≤–∏—Å —Å ID {service_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    service.name = new_name
    service.template_fields = new_template_fields
    async with async_session() as session:
        session.add(service)
        await session.commit()
    await message.answer(f"–°–µ—Ä–≤–∏—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {new_name}")
    app_logger.info(f"–°–µ—Ä–≤–∏—Å —Å ID {service_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    await state.clear()
    await show_pdf_admin_menu(message, state)

@dp.callback_query(StateFilter(AdminPanel.pdf_admin_menu), F.data == "admin:pdf:delete_service")
async def admin_delete_service(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    service_id = data.get("edit_service_id")
    if not service_id:
        await call.answer("–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –Ω–µ –≤—ã–±—Ä–∞–Ω.", show_alert=True)
        app_logger.error("–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π ID.")
        return
    async with async_session() as session:
        await session.execute("DELETE FROM pdf_services WHERE id = :id", {"id": service_id})
        await session.commit()
    await call.message.edit_text(f"–°–µ—Ä–≤–∏—Å —Å ID {service_id} —É–¥–∞–ª—ë–Ω.")
    app_logger.info(f"–°–µ—Ä–≤–∏—Å —Å ID {service_id} —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    await state.clear()
    await show_pdf_admin_menu(call.message, state)
    await call.answer()
