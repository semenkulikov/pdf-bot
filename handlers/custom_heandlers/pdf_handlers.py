from aiogram import types, F
from aiogram.fsm.context import FSMContext
from loader import dp, app_logger
from keyboards.inline.pdf_keyboards import pdf_country_markup, pdf_service_markup


@dp.message(F.text == "üìÇ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF")
async def pdf_generation_start(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´üìÇ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF¬ª.
    –í—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞–Ω—ã.
    """
    app_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –≤—ã–±—Ä–∞–ª –∫–Ω–æ–ø–∫—É –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF")
    markup = await pdf_country_markup()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:", reply_markup=markup)


@dp.callback_query(F.text.startswith("country:"))
async def handle_country_selection(call: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞.
    """
    country_code = call.data.split(":", 1)[1]
    # –°–æ—Ö—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É –≤ FSMContext –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(selected_country=country_code)
    markup = await pdf_service_markup(country_code)
    if not markup.inline_keyboard:
        await call.message.edit_text("–í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.")
        return
    app_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.full_name} –≤—ã–±—Ä–∞–ª —Å—Ç—Ä–∞–Ω—É {country_code}")
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:", reply_markup=markup)
    await call.answer()


@dp.callback_query(F.text.startswith("service:"))
async def handle_service_selection(call: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è PDF.
    """
    try:
        service_id = int(call.data.split(":", 1)[1])
    except ValueError:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Ä–≤–∏—Å–∞.", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_service=service_id)
    app_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.full_name} –≤—ã–±—Ä–∞–ª —Å–µ—Ä–≤–∏—Å {service_id}")

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö,
    # –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —à–∞–±–ª–æ–Ω–∞.
    await call.message.edit_text("–°–µ—Ä–≤–∏—Å –≤—ã–±—Ä–∞–Ω. –í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF...")
    await call.answer()
